@model List<VideoCallProject.Models.VideoCall>
@{
    ViewBag.Title = "Video Call Dashboard";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body { background-color: #f8f9fa; }
        .dashboard-header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 2rem 0; margin-bottom: 2rem; }
        .stat-card { background: white; border-radius: 10px; padding: 1.5rem; margin-bottom: 1rem; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .stat-number { font-size: 2.5rem; font-weight: bold; color: #667eea; }
        .calls-table { background: white; border-radius: 10px; padding: 1.5rem; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .status-badge { padding: 0.25rem 0.75rem; border-radius: 15px; font-size: 0.875rem; }
        .status-active { background-color: #d4edda; color: #155724; }
        .status-ended { background-color: #f8d7da; color: #721c24; }
    </style>
</head>
<body>
    <div class="dashboard-header">
        <div class="container">
            <h1><i class="fas fa-video"></i> Video Call Dashboard</h1>
            <p class="mb-0">Aktif görüşmeleri ve sistem durumunu izleyin</p>
        </div>
    </div>

    <div class="container">
        @if (!string.IsNullOrEmpty(ViewBag.Error))
        {
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-triangle"></i> @ViewBag.Error
            </div>
        }

        <!-- Statistics Cards -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="stat-card text-center">
                    <div class="stat-number">@Model.Count</div>
                    <div>Aktif Görüşme</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stat-card text-center">
                    <div class="stat-number">@Model.Sum(x => x.ParticipantCount)</div>
                    <div>Toplam Katılımcı</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stat-card text-center">
                    <div class="stat-number" id="totalCallsToday">-</div>
                    <div>Bugünkü Görüşmeler</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stat-card text-center">
                    <div class="stat-number" id="averageDuration">-</div>
                    <div>Ortalama Süre (dk)</div>
                </div>
            </div>
        </div>

        <!-- Active Calls Table -->
        <div class="calls-table">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h3><i class="fas fa-phone-alt"></i> Aktif Görüşmeler</h3>
                <button class="btn btn-primary" onclick="refreshData()">
                    <i class="fas fa-sync-alt"></i> Yenile
                </button>
            </div>

            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Oda ID</th>
                                <th>Konu</th>
                                <th>Başlangıç</th>
                                <th>Süre</th>
                                <th>Katılımcı</th>
                                <th>Kalite</th>
                                <th>Durum</th>
                                <th>İşlemler</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var call in Model)
                            {
                                <tr>
                                    <td><code>@call.RoomId</code></td>
                                    <td>@(call.Subject ?? "Genel Görüşme")</td>
                                    <td>@call.StartTime.ToString("dd.MM.yyyy HH:mm")</td>
                                    <td>
                                        @if (call.Status == "active")
                                        {
                                            <span class="live-duration" data-start="@call.StartTime.ToString("o")">
                                                <i class="fas fa-clock text-success"></i> Canlı
                                            </span>
                                        }
                                        else
                                        {
                                            <span>@TimeSpan.FromSeconds(call.Duration).ToString(@"hh\:mm\:ss")</span>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge bg-info">@call.ParticipantCount kişi</span>
                                    </td>
                                    <td>
                                        @switch (call.ConnectionQuality)
                                        {
                                            case "good":
                                                <span class="badge bg-success">İyi</span>
                                                break;
                                            case "medium":
                                                <span class="badge bg-warning">Orta</span>
                                                break;
                                            case "poor":
                                                <span class="badge bg-danger">Kötü</span>
                                                break;
                                            default:
                                                <span class="badge bg-secondary">Bilinmiyor</span>
                                                break;
                                        }
                                    </td>
                                    <td>
                                        <span class="status-badge @(call.Status == "active" ? "status-active" : "status-ended")">
                                            @call.Status.ToUpper()
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <a href="@Url.Action("Details", new { id = call.Id })" class="btn btn-outline-info" title="Detayları Görüntüle">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            @if (call.Status == "active")
                                            {
                                                <button class="btn btn-outline-danger" onclick="endCall('@call.RoomId')" title="Görüşmeyi Sonlandır">
                                                    <i class="fas fa-phone-slash"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-phone-slash fa-3x text-muted mb-3"></i>
                    <h4 class="text-muted">Aktif görüşme bulunmuyor</h4>
                    <p class="text-muted">Yeni görüşmeler başladığında burada görünecek</p>
                </div>
            }
        </div>

        <!-- Quick Actions -->
        <div class="row mt-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title"><i class="fas fa-history"></i> Hızlı Erişim</h5>
                        <a href="@Url.Action("History")" class="btn btn-outline-primary me-2">
                            <i class="fas fa-list"></i> Geçmiş Görüşmeler
                        </a>
                        <a href="#" class="btn btn-outline-success" onclick="createTestRoom()">
                            <i class="fas fa-plus"></i> Test Odası Oluştur
                        </a>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title"><i class="fas fa-chart-bar"></i> Sistem Durumu</h5>
                        <div class="row text-center">
                            <div class="col-4">
                                <div class="text-success">
                                    <i class="fas fa-check-circle fa-2x"></i>
                                    <div>SignalR</div>
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="text-success">
                                    <i class="fas fa-database fa-2x"></i>
                                    <div>Veritabanı</div>
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="text-warning">
                                    <i class="fas fa-server fa-2x"></i>
                                    <div>TURN Server</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>
    <script>
        // Page refresh functionality
        function refreshData() {
            location.reload();
        }

        // End call functionality
        async function endCall(roomId) {
            if (confirm('Bu görüşmeyi sonlandırmak istediğinizden emin misiniz?')) {
                try {
                    const response = await fetch('/VideoCall/EndCall', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ roomId: roomId })
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        alert('Görüşme sonlandırıldı');
                        refreshData();
                    } else {
                        alert('Hata: ' + result.error);
                    }
                } catch (error) {
                    alert('Hata oluştu: ' + error.message);
                }
            }
        }

        // Create test room
        function createTestRoom() {
            const roomId = 'test_' + Date.now();
            const url = `/VideoCall/Room?roomId=${roomId}&talepId=999&adSoyad=TestUser&konu=TestKonu&tip=test`;
            window.open(url, '_blank');
        }

        // Load daily statistics
        async function loadDailyStats() {
            try {
                const response = await fetch('/VideoCall/GetDailyStats');
                const result = await response.json();
                
                if (result.success) {
                    document.getElementById('totalCallsToday').textContent = result.data.totalCalls;
                    document.getElementById('averageDuration').textContent = Math.round(result.data.averageDuration / 60);
                }
            } catch (error) {
                console.error('Stats loading error:', error);
            }
        }

        // Update live durations
        function updateLiveDurations() {
            document.querySelectorAll('.live-duration').forEach(element => {
                const startTime = new Date(element.getAttribute('data-start'));
                const now = new Date();
                const duration = Math.floor((now - startTime) / 1000);
                
                const hours = Math.floor(duration / 3600);
                const minutes = Math.floor((duration % 3600) / 60);
                const seconds = duration % 60;
                
                element.innerHTML = `<i class="fas fa-clock text-success"></i> ${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            });
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadDailyStats();
            
            // Update live durations every second
            setInterval(updateLiveDurations, 1000);
            
            // Auto refresh every 30 seconds
            setInterval(refreshData, 30000);
        });
    </script>
</body>
</html>
